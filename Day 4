"""Buy Maximum Stocks if i stocks can be bought on i th day ðŸ”¥ | Greedy
In a stock market, there is a product with its infinite stocks. The stock prices are given for N days, where price[i] denotes the price of the stock on the ith day.
There is a rule that a customer can buy at most i stock on the ith day.
If the customer has an amount of k amount of money initially. The task is to find out the maximum number of stocks a customer can buy. """


from typing import List

class Solution:

    def buyMaximumProducts(self, n : int, k : int, price : List[int]) -> int:

        new = []

        for i,j in enumerate(price):

            new.append([i+1,j])

        new.sort(key = lambda x: x[1],reverse = 0)

        count = 0

        cost = 0

        for i in range(n):

            if cost + new[i][0]*new[i][1] <= k:

                count += new[i][0]

                cost += new[i][0]*new[i][1]

            else:

                rem = (k-cost)//(new[i][1])

                count += rem

                break

        return count
